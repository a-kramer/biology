package util;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.StringReader;

import org.sbml.jsbml.ASTNode;
import org.sbml.jsbml.SBMLDocument;
import org.sbml.jsbml.SBMLReader;
import org.sbml.jsbml.text.parser.FormulaParserLL3;
import org.sbml.jsbml.text.parser.IFormulaParser;

/**
 * 
 * This class represents a command line program that will read in an SBML file and a SMT formula
 * property and produce an SMT2 file that can be analyzed using a SMT2 solver such as dReal.
 * 
 * @author Curtis Madsen
 * 
 */
public class SBMLToSMT2 {

	/**
	 * 
	 * Returns a String representation of the provided SBML document as an ODE model in the SMT2
	 * format. This method additionally takes a property to be checked as a parameter and adds it to
	 * the SMT2 file so that it can be checked with a SMT2 solver.
	 * 
	 * @param document
	 *            - the SBML document to be translated into the ODE model
	 * @param trace
	 *            - time series data for the SBML document
	 * @param property
	 *            - the property that is added the the SMT2 file
	 * @return A string representation of the SMT2 file generated by converting the SBML file into
	 *         the SMT2 file
	 */
	public static String writeSMT2ToString(SBMLDocument document, Trace trace, ASTNode property) {
		String output = ";This file was generated from the SBML model:  "
				+ document.getModel().getId() + "\n";
		output += "(set-logic QF_NRA_ODE)\n";
		ODEModel odeModel = new ODEModel(document);
		output += "(declare-fun t () Real)\n";
		if (trace != null) {
			for (int i = 0; i < trace.getTimePoints().length; i++) {
				output += "(declare-fun t_" + i + " () Real)\n";
				output += "(declare-fun time_" + i + " () Real)\n";
			}
		}
		else {
			output += "(declare-fun t_0 () Real)\n";
			output += "(declare-fun t_t () Real)\n";
			output += "(declare-fun time_0 () Real)\n";
		}
		for (String variable : odeModel.getArrayOfVariables()) {
			output += "(declare-fun " + variable + " () Real)\n";
			if (trace != null) {
				for (int i = 0; i < trace.getTimePoints().length; i++) {
					output += "(declare-fun " + variable + "_" + i + " () Real)\n";
				}
			}
			else {
				output += "(declare-fun " + variable + "_0 () Real)\n";
				output += "(declare-fun " + variable + "_t () Real)\n";
			}
		}
		output += "(define-ode flow_1 ((= d/dt[t] 1)";
		String vars = "t";
		for (String variable : odeModel.getArrayOfVariables()) {
			output += " (= d/dt[" + variable + "] "
					+ ODEModel.prefixASTNodeToString(odeModel.getODE(variable)) + ")";
			vars += " " + variable;
		}
		output += "))\n";
		if (trace != null) {
			for (String variable : trace.getVariables()) {
				for (String var : odeModel.getArrayOfVariables()) {
					if (var.equals(variable)) {
						for (int i = 0; i < trace.getValues(variable).length; i++) {
							output += "(assert (>= " + variable + "_" + i + " "
									+ trace.getValues(variable)[i] + "))\n";
							output += "(assert (<= " + variable + "_" + i + " "
									+ trace.getValues(variable)[i] + "))\n";
						}
						break;
					}
				}
			}
			for (int i = 0; i < trace.getTimePoints().length; i++) {
				output += "(assert (>= time_" + i + " " + trace.getTimePoints()[i] + "))\n";
				output += "(assert (<= time_" + i + " " + trace.getTimePoints()[i] + "))\n";
				output += "(assert (>= t_" + i + " " + trace.getTimePoints()[i] + "))\n";
				output += "(assert (<= t_" + i + " " + trace.getTimePoints()[i] + "))\n";
				if (i != trace.getTimePoints().length - 1) {
					output += "(assert (= [" + vars.replaceAll(" ", "_" + (i + 1) + " ")
							+ "] (integral 0. time_" + i + " ["
							+ vars.replaceAll(" ", "_" + i + " ") + "] flow_1)))\n";
				}
			}
		}
		else {
			for (String variable : odeModel.getArrayOfVariables()) {
				output += "(assert (>= " + variable + "_0 " + odeModel.getInitialValue(variable)
						+ "))\n";
				output += "(assert (<= " + variable + "_0 " + odeModel.getInitialValue(variable)
						+ "))\n";
			}
			output += "(assert (= [" + vars.replaceAll(" ", "_t ") + "] (integral 0. time_0 ["
					+ vars.replaceAll(" ", "_0 ") + "] flow_1)))\n";
		}
		if (property != null) {
			output += "(assert " + ODEModel.prefixASTNodeToString(property) + ")\n";
		}
		output += "(check-sat)\n(exit)\n";
		return output;
	}

	/**
	 * 
	 * Writes an SMT2 file to the given filename that is generated by converting the provided SBML
	 * document intos an ODE model. This method additionally takes a property to be checked as a
	 * parameter and adds it to the SMT2 file so that it can be checked with a SMT2 solver.
	 * 
	 * @param document
	 *            - the SBML document to be translated into the ODE model
	 * @param trace
	 *            - time series data for the SBML document
	 * @param property
	 *            - the property that is added the the SMT2 file
	 * @param filename
	 *            - the filename that the SMT2 file should be written to
	 */
	public static void writeSMT2(SBMLDocument document, Trace trace, ASTNode property,
			String filename) throws IOException {
		FileOutputStream output = new FileOutputStream(filename);
		String smtFile = writeSMT2ToString(document, trace, property);
		output.write(smtFile.getBytes());
		output.flush();
		output.close();
	}

	/**
	 * 
	 * The main method that is executed when the program is run from the command line.
	 * 
	 * @param args
	 *            - the program arguments
	 */
	public static void main(String[] args) {
		if (args.length > 2) {
			try {
				String prop = args[2];
				for (int i = 3; i < args.length; i++) {
					prop += args[i];
				}
				IFormulaParser parser = new FormulaParserLL3(new StringReader(""));
				ASTNode property = ASTNode.parseFormula(prop, parser);
				System.out.println(SBMLToSMT2.writeSMT2ToString(SBMLReader.read(new File(args[0])),
						Trace.parseCopasiOutput(new File(args[1])), property));
			}
			catch (Exception e) {
				System.out.println("Invalid arguments.");
				System.out
						.println("Usage:  java SBMLToSMT2 <sbml_file> <trace_file> <property_to_check>");
			}
		}
		else {
			if (args.length > 1) {
				try {
					System.out.println(SBMLToSMT2.writeSMT2ToString(
							SBMLReader.read(new File(args[0])),
							Trace.parseCopasiOutput(new File(args[1])), null));
				}
				catch (Exception e) {
					System.out.println("Invalid arguments.");
					System.out.println("Usage:  java SBMLToSMT2 <sbml_file> <trace_file>");
				}
			}
			else {
				System.out.println("Invalid arguments.");
				System.out.println("Usage:  java SBMLToSMT2 <sbml_file> <trace_file>");
			}
		}
	}
}
