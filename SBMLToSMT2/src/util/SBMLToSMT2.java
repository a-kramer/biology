package util;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.StringReader;

import org.sbml.jsbml.ASTNode;
import org.sbml.jsbml.SBMLDocument;
import org.sbml.jsbml.SBMLReader;
import org.sbml.jsbml.text.parser.FormulaParserLL3;
import org.sbml.jsbml.text.parser.IFormulaParser;

/**
 * 
 * This class represents a command line program that will read in an SBML file and a SMT formula
 * property and produce an SMT2 file that can be analyzed using a SMT2 solver such as dReal.
 * 
 * @author Curtis Madsen
 * 
 */
public class SBMLToSMT2 {

	/**
	 * 
	 * Returns a String representation of the provided SBML document as an ODE model in the SMT2
	 * format. This method additionally takes a property to be checked as a parameter and adds it to
	 * the SMT2 file so that it can be checked with a SMT2 solver.
	 * 
	 * @param document
	 *            - the SBML document to be translated into the ODE model
	 * @param property
	 *            - the property that is added the the SMT2 file
	 * @return A string representation of the SMT2 file generated by converting the SBML file into
	 *         the SMT2 file
	 */
	public static String writeSMT2ToString(SBMLDocument document, ASTNode property) {
		String output = ";This file was generated from the SBML model:  "
				+ document.getModel().getId() + "\n";
		output += "(set-logic QF_NRA_ODE)\n";
		ODEModel odeModel = new ODEModel(document);
		output += "(declare-fun time_0 () Real)\n";
		for (String variable : odeModel.getArrayOfVariables()) {
			output += "(declare-fun " + variable + " () Real)\n";
			output += "(declare-fun " + variable + "_0 () Real)\n";
			output += "(declare-fun " + variable + "_t () Real)\n";
		}
		for (String variable : odeModel.getArrayOfVariables()) {
			output += "(define-ode " + variable + "_rate (= d/dt[" + variable + "] "
					+ ODEModel.prefixASTNodeToString(odeModel.getODE(variable)) + "))\n";
		}
		for (String variable : odeModel.getArrayOfVariables()) {
			output += "(assert (>= " + variable + "_0 " + odeModel.getInitialValue(variable)
					+ "))\n";
			output += "(assert (<= " + variable + "_0 " + odeModel.getInitialValue(variable)
					+ "))\n";
			output += "(assert (= [" + variable + "_t] (integral 0. time_0 [" + variable + "_0] "
					+ variable + "_rate)))\n";
		}
		output += "(assert " + ODEModel.prefixASTNodeToString(property) + ")\n";
		output += "(check-sat)\n(exit)\n";
		return output;
	}

	/**
	 * 
	 * Writes an SMT2 file to the given filename that is generated by converting the provided SBML
	 * document intos an ODE model. This method additionally takes a property to be checked as a
	 * parameter and adds it to the SMT2 file so that it can be checked with a SMT2 solver.
	 * 
	 * @param document
	 *            - the SBML document to be translated into the ODE model
	 * @param property
	 *            - the property that is added the the SMT2 file
	 * @param filename
	 *            - the filename that the SMT2 file should be written to
	 */
	public static void writeSMT2(SBMLDocument document, ASTNode property, String filename)
			throws IOException {
		FileOutputStream output = new FileOutputStream(filename);
		String smtFile = writeSMT2ToString(document, property);
		output.write(smtFile.getBytes());
		output.flush();
		output.close();
	}

	/**
	 * 
	 * The main method that is executed when the program is run from the command line.
	 * 
	 * @param args
	 *            - the program arguments
	 */
	public static void main(String[] args) {
		if (args.length > 1) {
			try {
				String prop = args[1];
				for (int i = 2; i < args.length; i++) {
					prop += args[i];
				}
				IFormulaParser parser = new FormulaParserLL3(new StringReader(""));
				ASTNode property = ASTNode.parseFormula(prop, parser);
				System.out.println(SBMLToSMT2.writeSMT2ToString(SBMLReader.read(new File(args[0])),
						property));
			}
			catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		else {
			System.out.println("Invalid arguments.");
			System.out.println("Usage:  java SBMLToSMT2 <sbml_file> <property_to_check>");
		}
	}
}
